#cloud-config
apt:
  preserve_sources_list: true
  sources:
    msft.list:
      source: "deb https://packages.microsoft.com/ubuntu/18.04/multiarch/prod bionic main"
      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        Version: GnuPG v1.4.7 (GNU/Linux)

        mQENBFYxWIwBCADAKoZhZlJxGNGWzqV+1OG1xiQeoowKhssGAKvd+buXCGISZJwT
        LXZqIcIiLP7pqdcZWtE9bSc7yBY2MalDp9Liu0KekywQ6VVX1T72NPf5Ev6x6DLV
        7aVWsCzUAF+eb7DC9fPuFLEdxmOEYoPjzrQ7cCnSV4JQxAqhU4T6OjbvRazGl3ag
        OeizPXmRljMtUUttHQZnRhtlzkmwIrUivbfFPD+fEoHJ1+uIdfOzZX8/oKHKLe2j
        H632kvsNzJFlROVvGLYAk2WRcLu+RjjggixhwiB+Mu/A8Tf4V6b+YppS44q8EvVr 
        M+QvY7LNSOffSO6Slsy9oisGTdfE39nC7pVRABEBAAG0N01pY3Jvc29mdCAoUmVs
        ZWFzZSBzaWduaW5nKSA8Z3Bnc2VjdXJpdHlAbWljcm9zb2Z0LmNvbT6JATUEEwEC
        AB8FAlYxWIwCGwMGCwkIBwMCBBUCCAMDFgIBAh4BAheAAAoJEOs+lK2+EinPGpsH
        /32vKy29Hg51H9dfFJMx0/a/F+5vKeCeVqimvyTM04C+XENNuSbYZ3eRPHGHFLqe
        MNGxsfb7C7ZxEeW7J/vSzRgHxm7ZvESisUYRFq2sgkJ+HFERNrqfci45bdhmrUsy
        7SWw9ybxdFOkuQoyKD3tBmiGfONQMlBaOMWdAsic965rvJsd5zYaZZFI1UwTkFXV
        KJt3bp3Ngn1vEYXwijGTa+FXz6GLHueJwF0I7ug34DgUkAFvAs8Hacr2DRYxL5RJ
        XdNgj4Jd2/g6T9InmWT0hASljur+dJnzNiNCkbn9KbX7J/qK1IbR8y560yRmFsU+
        NdCFTW7wY0Fb1fWJ+/KTsC4=
        =J6gs
        -----END PGP PUBLIC KEY BLOCK-----
packages:
  - moby-cli
  - libiothsm-std
  - moby-engine

runcmd:
  - hostn=$(cat /etc/hostname)
  - |
    set -x
    (
      # Wait for docker daemon to start
      while [ $(ps -ef | grep -v grep | grep docker | wc -l) -le 0 ]; do 
        sleep 3
      done

      apt install iotedge
    )
 

write_files:
  - owner: root:root
    path: /etc/iotedge/configedge.sh
    permissions: "0755"
    content: |
      #!/bin/sh
      # Copyright (c) Microsoft. All rights reserved.
      # configedge.sh
      # updates connection string in edge config.yaml and restarts edge runtime
      # accepts one parameter: a complete connection string
      # must be executed with elevated privileges
      set -e
      logFile=/var/log/azure/configedge.log
      configFile=/etc/iotedge/config.yaml

      if [ -z "$1" ]
      then
        echo "$(date) No connection string supplied. Exiting." >&2
        exit 1
      fi

      connectionString=$1

      # wait to set connection string until config.yaml is available
      until [ -f $configFile ]
      do
        sleep 5
      done

      echo "$(date) Setting connection string to $connectionString" >> $logFile
      sed -i "s#\(device_connection_string: \).*#\1\"$connectionString\"#g" $configFile
      sudo systemctl restart iotedge

      echo " $(date) Connection string set to $connectionString"
  - owner: root:root
    path: /usr/share/nats/nats-cluster.yml
    permissions: "0755"
    content: |
      version: "3"
      services:
        nats:
          image: nats-streaming
          ports:
            - "8222:8222"
            - "4222:4222"
        nats-1:
          image: nats
          command: "--cluster nats://0.0.0.0:6222 --routes=nats://nats:6222"
        nats-2:
          image: nats
          command: "--cluster nats://0.0.0.0:6222 --routes=nats://nats:6222"
      networks:
        default:
          external:
            name: nats
  - owner: root:root
    path: /usr/share/nats/startup.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      docker network create nats
      curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose 
      docker-compose -f /usr/share/nats/nats-cluster.yml up -d
      set -x
      (
      # Wait for docker daemon to start
      until [ $(docker inspect -f {{.State.Running}} sql) = "true" ]; do
      sleep 1;
      echo SQL container not started;
      done;
      echo SQL container started;
      sleep 2m;
      docker exec -i sql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'Strong!Passw0rd' -Q "CREATE DATABASE MeasurementsDB ON (NAME = MeasurementsDB, FILENAME = '/var/opt/mssql/measurementsdb.mdf');"
      sleep 5s;
      docker exec -i sql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'Strong!Passw0rd' -Q "CREATE TABLE MeasurementsDB.[dbo].[PowerMeasurements] ([id] NVARCHAR (50) NULL,[source] NVARCHAR (50) NULL,[type] NVARCHAR (50) NULL,[specversion] NVARCHAR (50) NULL,[contenttype] NVARCHAR (50) NULL,[hwid] NVARCHAR (50) NULL,[address] NVARCHAR (50) NULL,[value] FLOAT (53) NULL,[publishtimestamp] DATETIME NULL);"
      echo Please open http://$(dig +short myip.opendns.com @resolver1.opendns.com):3000 and check if data is available in Voltage dashboard
      )
      
final_message: "The system is finally up, after $UPTIME seconds"